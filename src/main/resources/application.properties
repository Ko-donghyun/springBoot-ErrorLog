# SpringBoot는 기본적으로 application.properties 파일을 추가하면 자동으로 Common application properties를 로드하여 프로퍼티 값을 적용할 수 있다.
# 하지만 자바의 Properties의 파일의 사용에는 표현의 한계가 있기 때문에 최근에는 Properties를 YAML을 많이 사용하고 있다.
# SpringBoot에서는 SnakeYAML을 포함하고 있어서 쉽게 외부 파일을 YAML으로 작성하여 쉽게 로드하여 객체로 매핑할 수 있다.

# YAML 파일은 .properties 파일과 달리 계층과 배열 구조의 데이터를 쉽게 만들 수 있고 이것을 Map, List 또는 Bean에 쉽게 편리하게 매핑할 수 있다.
# Ruby on Rails에서는 이미 오래전부터 YAML 파일을 사용하여 데이터베이스나 시스템 설정 파일로 사용해 왔다.
# YAML은 JSON과 비슷하지만 표현법이 더 간단하여 인기있기 사용되고 있다.

# 뷰를 개발할 때는 HTML코드 변경을 자주하는데 그 때마다 어플리케이션에 적용되는 것을 확인하는 것은 매우 불편한 일이다.
# 그래서 spring-loaded을 사용한 Spring의 Hot swapping 을 이용한다.
# 뷰 템플릿이 수정한 이후 자동으로 새로 컴파일된 파일을 참조하기 위해서
# 뷰 템플릿의 cache를 사용하지 않기 위해 캐시를 끈다.

spring.thymeleaf.cache = false

# 기본적으로 SpringBoot의 application.properties에서 뷰 템플릿의 파일 위치를 지정할 수 있는데
# src/resources/templates 디렉토리 안에 위치하도록 설정되어져 있다.
# 만약 다른 위치에 템플릿 파일들을 위치하고 싶으면 템플릿 위치를 아래와 같이 수정

spring.thymeleaf.prefix = classpath:/templates/

# 서버의 포트 설정
server.port=9000